name: Run Tests
on: [push, pull_request]

jobs:
  unit:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2.1.3
      with:
        python-version: '3.8'
        architecture: x64
    - name: Install and configure Poetry
      run: |
        pip install poetry==1.1.*
        poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v2.1.1
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Run tests
      run: |
        poetry run pytest --cov=servo --cov-config=setup.cfg --doctest-modules \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:artifacts/coverage.xml --cov-report=html:artifacts/coverage-html \
          --junitxml=artifacts/report.xml --html=artifacts/report.html \
          --self-contained-html
    - uses: actions/upload-artifact@v2
      with:
        name: test-reports
        path: artifacts/
    - uses: actions/upload-artifact@v2
      with:
        name: report.html
        path: artifacts/report.html
    - name: Test CLI entrypoints
      run: poetry run servo version

  integration:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2.1.3
      with:
        python-version: '3.8'
        architecture: x64
    - name: Install and configure Poetry
      run: |
        pip install poetry==1.1.*
        poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v2.1.1
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Create tests/kubeconfig
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: config view --minify --flatten > tests/kubeconfig
    - name: Install AWS IAM Authenticator
      uses: prepor/action-aws-iam-authenticator@master
    - name: Run integration tests
      if: github.event_name != 'pull_request'
      run: |
        poetry run pytest -n 6 --dist loadscope \
          -T integration --verbose

  system:
    name: Run System Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2.1.3
      with:
        python-version: '3.8'
        architecture: x64
    - name: Install and configure Poetry
      run: |
        pip install poetry==1.1.*
        poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v2.1.1
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Create tests/kubeconfig
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: config view --minify --flatten > tests/kubeconfig
    - name: Rename EKS cluster to eks
      run: |
        sudo kubectl config rename-context \
          --kubeconfig=tests/kubeconfig \
          $(shell kubectl config current-context) \
          eks
    - name: Create kind cluster
      uses: helm/kind-action@v1.0.0
      with:
        cluster_name: kind
    - name: Display kind kubeconfig
      run: kind get clusters && kind get kubeconfig --name kind
    - name: Merge kind kubeconfig
      run: sudo kind export kubeconfig --name kind --kubeconfig tests/kubeconfig
    - name: Install AWS IAM Authenticator
      uses: prepor/action-aws-iam-authenticator@master
    - name: Run integration tests
      if: github.event_name != 'pull_request'
      run: |
        poetry run pytest -n 6 --dist loadscope \
          -T system --verbose
